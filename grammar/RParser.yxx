/* -*- C++ -*- */
%output  "RParser.cxx"
%defines "RParser.hxx"

%skeleton "lalr1.cc"
%require "3.5"

%define api.parser.class {RParser}
%define api.namespace {rastr::parser}
%define api.location.type {rastr::parser::Location}

/* assert correct cleanup of semantic value objects */
%define parse.assert

%define parse.trace

/* increase usefulness of error messages */
%define parse.error verbose
%parse-param { rastr::parser::RLexer& lexer} { rastr::ast::RProgramNodeSPtr& program}

/* call yylex with a location */
%locations

%define api.value.type {rastr::ast::Node*}

/* %define api.token.constructor */
/* %define api.token.prefix {TOKEN_} */

%token-table

%token LPAREN RPAREN RSQPAREN LBRACE RBRACE EXCLAMATION NEWLINE DOUBLE_EXCLAMATION
%token COMMA SEMICOLON
%token END_OF_INPUT
%token STR_CONST LITERAL_CONST INT_CONST FLOAT_CONST COMPLEX_CONST RAW_STRING_CONST NULL_CONST SYMBOL FUNCTION
%token INCOMPLETE_STRING
%token LEFT_ASSIGN EQ_ASSIGN RIGHT_ASSIGN LBB
%token FOR IN IF ELSE WHILE NEXT BREAK REPEAT
%token GT GE LT LE EQ NE AND OR AND2 OR2
%token NS_GET NS_GET_INT
%token COMMENT LINE_DIRECTIVE
%token SYMBOL_FORMALS
%token EQ_FORMALS
%token EQ_SUB SYMBOL_SUB
%token SYMBOL_FUNCTION_CALL
%token SYMBOL_PACKAGE
%token COLON_ASSIGN
%token SLOT
%token MINUS PLUS TILDE QUESTION COLON ASTERISK SLASH CARET SPECIAL LSQPAREN DOLLAR AT
%nterm prog
%nterm expr_or_assign_or_help
%nterm expr_or_help
%nterm expr
%nterm cond
%nterm ifcond
%nterm forcond
%nterm exprlist
%nterm sublist
%nterm sub
%nterm formlist


/* This is the precedence table, low to high */
%left  QUESTION
%left	 LOW WHILE FOR REPEAT
%right IF
%left	 ELSE
%right LEFT_ASSIGN
%right EQ_ASSIGN
%left	 RIGHT_ASSIGN
%left	 '~' TILDE
%left	 OR OR2
%left	 AND AND2
%left	 UNOT NOT
%nonassoc   	GT GE LT LE EQ NE
%left  PLUS MINUS
%left  ASTERISK SLASH
%left  SPECIAL
%left  COLON
%left  UMINUS UPLUS
%right CARET
%left  DOLLAR AT
%left  NS_GET NS_GET_INT
%nonassoc	LPAREN LSQPAREN LBB

/* inserted near top of header + source file */
%code requires {
    #include <string>
    #include <iostream>
    namespace rastr {
        namespace parser {
            class RLexer;
            class RParser;
        }
    }

    #include "ast.hpp"
    #include "Location.hpp"
    using namespace rastr::ast;
}

%code {
    #include <string>
    #include <iostream>
    #include "ast.hpp"
    #include "RLexer.hpp"
    #undef yylex
    #define yylex lexer.yylex


Node* create_binary_expression(Node* op_ptr, Node* left_expr_ptr, Node* right_expr_ptr) {
    auto op = wrap<OperatorRNode>(op_ptr);
    auto left_expr = wrap<ExpressionRNode>(left_expr_ptr);
    auto right_expr = wrap<ExpressionRNode>(right_expr_ptr);
    return new BinaryOperationExpressionRNode(op, left_expr, right_expr);
}

Node* create_unary_expression(Node* op_ptr, Node* expr_ptr) {
    auto op = wrap<OperatorRNode>(op_ptr);
    auto expr = wrap<ExpressionRNode>(expr_ptr);
    return new UnaryOperationExpressionRNode(op, expr);
}

Node* create_expression_condition(Node* expr_ptr, Node* opening_delimiter_ptr, Node* closing_delimiter_ptr) {
    auto expr = wrap<ExpressionRNode>(expr_ptr);
    auto opening_delimiter = wrap<DelimiterRNode>(opening_delimiter_ptr);
    auto closing_delimiter = wrap<DelimiterRNode>(closing_delimiter_ptr);
    return new ExpressionConditionRNode(opening_delimiter, expr, closing_delimiter);
}

void add_terminator(ExpressionSequenceRNode* seq_ptr, Node* delimiter_ptr) {
    auto delimiter = wrap<DelimiterRNode>(delimiter_ptr);
    int size = seq_ptr -> get_size();
    if(size == 0) { return; }
    auto expr = seq_ptr -> get_element(size - 1);
    auto terminated_expr = std::make_shared<TerminatedExpressionRNode>(expr, delimiter);
    seq_ptr -> set_element(size - 1, terminated_expr);
}

}


%%
prog: exprlist END_OF_INPUT                                                     {
                                                                                  auto begin = std::make_shared<BeginNode>();
                                                                                  auto exprs = wrap<ExpressionSequenceRNode>($1);
                                                                                  auto end = wrap<EndNode>($2);
                                                                                  program.reset(new RProgramNode(begin, exprs, end));
                                                                                  yyresult = 0;
                                                                                  YYACCEPT;
                                                                                }

expr_or_assign_or_help: expr                                                    { $$ = $1; }
                      | expr_or_assign_or_help EQ_ASSIGN expr_or_assign_or_help { $$ = create_binary_expression($2, $1, $3); }
                      | expr_or_assign_or_help QUESTION  expr_or_assign_or_help { $$ = create_binary_expression($2, $1, $3); }
                      ;

expr_or_help: expr                                                              { $$ = $1; }
            | expr_or_help QUESTION expr_or_help                                { $$ = create_binary_expression($2, $1, $3); }
            ;

expr: INT_CONST                                                                 { $$ = $1; } // IntegerLiteralExpressionRNode
    | FLOAT_CONST                                                               { $$ = $1; } // DoubleLiteralExpressionRNode
    | COMPLEX_CONST                                                             { $$ = $1; } // ComplexLiteralExpressionRNode
    | LITERAL_CONST                                                             { $$ = $1; }
    | STR_CONST                                                                 { $$ = $1; } // CharacterLiteralRNode
    | RAW_STRING_CONST                                                          { $$ = $1; } // RawStringLiteralExpressionRNode
    | NULL_CONST                                                                { $$ = $1; }
    | SYMBOL                                                                    { $$ = $1; }
    | LBRACE exprlist RBRACE                                                    {
                                                                                  auto opening_delimiter = wrap<DelimiterRNode>($1);
                                                                                  auto exprs = wrap<ExpressionSequenceRNode>($2);
                                                                                  auto closing_delimiter = wrap<DelimiterRNode>($3);
                                                                                  $$ = new BlockExpressionRNode(opening_delimiter, exprs, closing_delimiter);
                                                                                  lexer.disable_eat_lines();
                                                                                }
    | LPAREN expr_or_assign_or_help RPAREN                                      {
                                                                                  auto opening_delimiter = wrap<DelimiterRNode>($1);
                                                                                  auto body = wrap<ExpressionRNode>($2);
                                                                                  auto closing_delimiter = wrap<DelimiterRNode>($3);
                                                                                  $$ = new GroupExpressionRNode(opening_delimiter, body, closing_delimiter);
                                                                                }
    | MINUS expr %prec UMINUS                                                   { $$ = create_unary_expression($1, $2); }
    | PLUS expr %prec UMINUS                                                    { $$ = create_unary_expression($1, $2); }
    | EXCLAMATION expr %prec UNOT                                               { $$ = create_unary_expression($1, $2); }
    | DOUBLE_EXCLAMATION expr %prec UNOT                                        { $$ = create_unary_expression($1, $2); }
    | TILDE expr %prec TILDE                                                    { $$ = create_unary_expression($1, $2); }
    | QUESTION expr_or_assign_or_help                                           { $$ = create_unary_expression($1, $2); }
    | expr COLON  expr                                                          { $$ = create_binary_expression($2, $1, $3); }
    | expr PLUS  expr                                                           { $$ = create_binary_expression($2, $1, $3); }
    | expr MINUS expr                                                           { $$ = create_binary_expression($2, $1, $3); }
    | expr ASTERISK expr                                                        { $$ = create_binary_expression($2, $1, $3); }
    | expr SLASH expr                                                           { $$ = create_binary_expression($2, $1, $3); }
    | expr CARET expr                                                           { $$ = create_binary_expression($2, $1, $3); }
    | expr SPECIAL expr                                                         { $$ = create_binary_expression($2, $1, $3); }
    | expr TILDE expr                                                           { $$ = create_binary_expression($2, $1, $3); }
    | expr LT expr                                                              { $$ = create_binary_expression($2, $1, $3); }
    | expr LE expr                                                              { $$ = create_binary_expression($2, $1, $3); }
    | expr EQ expr                                                              { $$ = create_binary_expression($2, $1, $3); }
    | expr NE expr                                                              { $$ = create_binary_expression($2, $1, $3); }
    | expr GE expr                                                              { $$ = create_binary_expression($2, $1, $3); }
    | expr GT expr                                                              { $$ = create_binary_expression($2, $1, $3); }
    | expr AND expr                                                             { $$ = create_binary_expression($2, $1, $3); }
    | expr OR expr                                                              { $$ = create_binary_expression($2, $1, $3); }
    | expr AND2 expr                                                            { $$ = create_binary_expression($2, $1, $3); }
    | expr OR2 expr                                                             { $$ = create_binary_expression($2, $1, $3); }
    | expr LEFT_ASSIGN expr                                                     { $$ = create_binary_expression($2, $1, $3); }
    | expr RIGHT_ASSIGN expr                                                    { $$ = create_binary_expression($2, $1, $3); }
    | FUNCTION LPAREN formlist RPAREN cr expr_or_assign_or_help %prec LOW       {
                                                                                  auto keyword = wrap<KeywordRNode>($1);
                                                                                  auto opening_delimiter = wrap<DelimiterRNode>($2);
                                                                                  auto params = wrap<ExpressionSequenceRNode>($3);
                                                                                  auto closing_delimiter = wrap<DelimiterRNode>($4);
                                                                                  auto body = wrap<ExpressionRNode>($6);
                                                                                  $$ = new FunctionDefinitionExpressionRNode(keyword, opening_delimiter, params, closing_delimiter, body);
                                                                                }
    | expr LPAREN sublist RPAREN                                                {
                                                                                  auto target = wrap<ExpressionRNode>($1);
                                                                                  auto opening_delimiter = wrap<DelimiterRNode>($2);
                                                                                  auto args = wrap<ExpressionSequenceRNode>($3);
                                                                                  auto closing_delimiter = wrap<DelimiterRNode>($4);
                                                                                  $$ = new FunctionCallExpressionRNode(target, opening_delimiter, args, closing_delimiter);
                                                                                }
    | IF ifcond expr_or_assign_or_help                                          {
                                                                                  $$ = new IfConditionalExpressionRNode(wrap<KeywordRNode>($1),
                                                                                                                        wrap<ExpressionConditionRNode>($2),
                                                                                                                        wrap<ExpressionRNode>($3));
                                                                                }
    | IF ifcond expr_or_assign_or_help ELSE expr_or_assign_or_help              {
                                                                                  $$ = new IfElseConditionalExpressionRNode(wrap<KeywordRNode>($1),
                                                                                                                            wrap<ExpressionConditionRNode>($2),
                                                                                                                            wrap<ExpressionRNode>($3),
                                                                                                                            wrap<KeywordRNode>($4),
                                                                                                                            wrap<ExpressionRNode>($5));
                                                                                }
    | FOR forcond expr_or_assign_or_help %prec FOR                              {
                                                                                  $$ = new ForLoopExpressionRNode(wrap<KeywordRNode>($1),
                                                                                                                  wrap<InConditionRNode>($2),
                                                                                                                  wrap<ExpressionRNode>($3));
                                                                                }
    | WHILE cond expr_or_assign_or_help                                         {
                                                                                  $$ = new WhileLoopExpressionRNode(wrap<KeywordRNode>($1),
                                                                                                                    wrap<ExpressionConditionRNode>($2),
                                                                                                                    wrap<ExpressionRNode>($3));
                                                                                }
    | REPEAT expr_or_assign_or_help                                             {
                                                                                  $$ = new RepeatLoopExpressionRNode(wrap<KeywordRNode>($1),
                                                                                                                     wrap<ExpressionRNode>($2));
                                                                                }
    | expr LBB sublist RSQPAREN RSQPAREN                                        {
                                                                                  auto object = wrap<ExpressionRNode>($1);
                                                                                  auto opening_delimiter = wrap<DelimiterRNode>($2);
                                                                                  auto indices = wrap<ExpressionSequenceRNode>($3);
                                                                                  auto first_closing_delimiter = wrap<DelimiterRNode>($4);
                                                                                  auto second_closing_delimiter = wrap<DelimiterRNode>($5);
                                                                                  $$ =  new IndexingExpressionRNode(object,
                                                                                                                    opening_delimiter,
                                                                                                                    indices,
                                                                                                                    first_closing_delimiter,
                                                                                                                    second_closing_delimiter);
                                                                                }
    | expr LSQPAREN sublist RSQPAREN                                            {
                                                                                  auto object = wrap<ExpressionRNode>($1);
                                                                                  auto opening_delimiter = wrap<DelimiterRNode>($2);
                                                                                  auto indices = wrap<ExpressionSequenceRNode>($3);
                                                                                  auto closing_delimiter = wrap<DelimiterRNode>($4);
                                                                                  $$ =  new SubsettingExpressionRNode(object,
                                                                                                                      opening_delimiter,
                                                                                                                      indices,
                                                                                                                      closing_delimiter);
                                                                                }
    | SYMBOL NS_GET SYMBOL                                                      { $$ = create_binary_expression($2, $1, $3); }
    | SYMBOL NS_GET STR_CONST                                                   { $$ = create_binary_expression($2, $1, $3); }
    | STR_CONST NS_GET SYMBOL                                                   { $$ = create_binary_expression($2, $1, $3); }
    | STR_CONST NS_GET STR_CONST                                                { $$ = create_binary_expression($2, $1, $3); }
    | SYMBOL NS_GET_INT SYMBOL                                                  { $$ = create_binary_expression($2, $1, $3); }
    | SYMBOL NS_GET_INT STR_CONST                                               { $$ = create_binary_expression($2, $1, $3); }
    | STR_CONST NS_GET_INT SYMBOL                                               { $$ = create_binary_expression($2, $1, $3); }
    | STR_CONST NS_GET_INT STR_CONST                                            { $$ = create_binary_expression($2, $1, $3); }
    | expr DOLLAR SYMBOL                                                        { $$ = create_binary_expression($2, $1, $3); }
    | expr DOLLAR STR_CONST                                                     { $$ = create_binary_expression($2, $1, $3); }
    | expr AT SYMBOL                                                            { $$ = create_binary_expression($2, $1, $3); }
    | expr AT STR_CONST                                                         { $$ = create_binary_expression($2, $1, $3); }
    | NEXT                                                                      { $$ = $1; }
    | BREAK                                                                     { $$ = $1; }
    ;

cond: LPAREN expr_or_help RPAREN                                                {
                                                                                  $$ = create_expression_condition($2, $1, $3);
                                                                                  lexer.enable_eat_lines();
                                                                                }
    ;

ifcond: LPAREN expr_or_help RPAREN                                              {
                                                                                  $$ = create_expression_condition($2, $1, $3);
                                                                                  lexer.enable_eat_lines();
                                                                                }
      ;

forcond: LPAREN SYMBOL IN expr_or_help RPAREN                                   {
                                                                                  auto opening_delimiter = wrap<DelimiterRNode>($1);
                                                                                  auto closing_delimiter = wrap<DelimiterRNode>($5);
                                                                                  auto sym = wrap<SymbolExpressionRNode>($2);                                                                                            auto keyword = wrap<KeywordRNode>($3);
                                                                                  auto expr = wrap<ExpressionRNode>($4);
                                                                                  $$ = new InConditionRNode(opening_delimiter, sym, keyword, expr, closing_delimiter);
                                                                                  lexer.enable_eat_lines();
                                                                                }
       ;

exprlist:                                                                       { $$ = new ExpressionSequenceRNode(); }
        | expr_or_assign_or_help                                                {
                                                                                  auto block = new ExpressionSequenceRNode();
                                                                                  block -> push_back(wrap<ExpressionRNode>($1));
                                                                                  $$ = block;
                                                                                }
        | exprlist SEMICOLON expr_or_assign_or_help                             {
                                                                                  auto block = static_cast<ExpressionSequenceRNode*>($1);
                                                                                  add_terminator(block, $2);
                                                                                  block -> push_back(wrap<ExpressionRNode>($3));
                                                                                  $$ = block;
                                                                                }
        | exprlist SEMICOLON                                                    {
                                                                                  auto block = static_cast<ExpressionSequenceRNode*>($1);
                                                                                  add_terminator(block, $2);
                                                                                  $$ = block;
                                                                                }
        | exprlist NEWLINE expr_or_assign_or_help                               {
                                                                                  auto block = static_cast<ExpressionSequenceRNode*>($1);
                                                                                  add_terminator(block, $2);
                                                                                  block -> push_back(wrap<ExpressionRNode>($3));
                                                                                  $$ = block;
                                                                                }
        | exprlist NEWLINE                                                      {
                                                                                  auto block = static_cast<ExpressionSequenceRNode*>($1);
                                                                                  add_terminator(block, $2);
                                                                                  $$ = block;
                                                                                }
        ;

sublist: sub                                                                    {
                                                                                  auto seq = new ExpressionSequenceRNode();
                                                                                  seq -> push_back(wrap<ExpressionRNode>($1));
                                                                                  $$ = seq;
                                                                                }
       | sublist cr COMMA sub                                                   {
                                                                                  auto seq = static_cast<ExpressionSequenceRNode*>($1);
                                                                                  add_terminator(seq, $3);
                                                                                  seq -> push_back(wrap<ExpressionRNode>($4));
                                                                                  $$ = seq;
                                                                                }
       ;

sub:                                                                            { $$ = new MissingExpressionRNode(); }
   | expr_or_help                                                               { $$ = $1; }
   | SYMBOL EQ_ASSIGN                                                           { $$ = create_binary_expression($2, $1, new MissingExpressionRNode()); }
   | SYMBOL EQ_ASSIGN expr_or_help                                              { $$ = create_binary_expression($2, $1, $3); }
   | STR_CONST EQ_ASSIGN                                                        { $$ = create_binary_expression($2, $1, new MissingExpressionRNode()); }
   | STR_CONST EQ_ASSIGN expr_or_help                                           { $$ = create_binary_expression($2, $1, $3); }
   | NULL_CONST EQ_ASSIGN                                                       { $$ = create_binary_expression($2, $1, new MissingExpressionRNode()); }
   | NULL_CONST EQ_ASSIGN expr_or_help                                          { $$ = create_binary_expression($2, $1, $3); }
   ;

formlist:                                                                       { $$ = new ExpressionSequenceRNode(); }
        | formlist_inner                                                        { $$ = $1; }
        ;

formlist_inner: SYMBOL                                                          {
                                                                                  auto seq = new ExpressionSequenceRNode();
                                                                                  auto element = wrap<SymbolExpressionRNode>($1);
                                                                                  seq -> push_back(element);
                                                                                  $$ = seq;
                                                                                }
        | SYMBOL EQ_ASSIGN expr_or_help                                         {
                                                                                  auto seq = new ExpressionSequenceRNode();
                                                                                  auto element = wrap<ExpressionRNode>(create_binary_expression($2, $1, $3));
                                                                                  seq -> push_back(element);
                                                                                  $$ = seq;
                                                                                }
        | formlist COMMA SYMBOL                                                 {
                                                                                  auto seq = static_cast<ExpressionSequenceRNode*>($1);
                                                                                  auto element = wrap<SymbolExpressionRNode>($3);
                                                                                  add_terminator(seq, $2);
                                                                                  seq -> push_back(element);
                                                                                  $$ = seq;
                                                                                }
        | formlist COMMA SYMBOL EQ_ASSIGN expr_or_help                          {
                                                                                  auto seq = static_cast<ExpressionSequenceRNode*>($1);
                                                                                  auto element = wrap<ExpressionRNode>(create_binary_expression($4, $3, $5));
                                                                                  add_terminator(seq, $2);
                                                                                  seq -> push_back(element);
                                                                                  $$ = seq;
                                                                                }
        ;

cr: { lexer.enable_eat_lines(); }
  ;

%%

void rastr::parser::RParser::error(const location_type& location, const std::string& message) {
    std::cerr << message << " at " << location;
}
